{
	"App": {
		"prefix": "app",
		"body": [
			"private IServiceProvider _serviceProvider;",
			"\t\tprivate IConfiguration _configuration;",
			"",
			"\t\tpublic App()",
			"\t\t{",
			"\t\t\tvar _configurationBuilder = new ConfigurationBuilder()",
			"\t\t\t\t.SetBasePath(Directory.GetCurrentDirectory())",
			"\t\t\t\t.AddJsonFile(\"appsettings.json\");",
			"",
			"\t\t\t_configuration = _configurationBuilder.Build();",
			"",
			"\t\t\tvar services = new ServiceCollection();",
			"",
			"\t\t\tservices.AddSingleton<IConfiguration>(_configuration);",
			"",
			"\t\t\t// Views",
			"\t\t\tservices.AddTransient<AuthView>();",
			"",
			"\t\t\t// ViewModels",
			"\t\t\tservices.AddTransient<AuthViewModel>();",
			"",
			"\t\t\t// Services",
			"\t\t\tservices.AddScoped<IViewService, ViewService>();",
			"",
			"\t\t\t// DbContext",
			"\t\t\tservices.AddDbContext<DatabaseContext>(options => options.UseSqlServer(_configuration.GetConnectionString(\"mssql\")));",
			"\t\t}",
			"",
			"\t\tprotected override void OnStartup(StartupEventArgs e)",
			"\t\t{",
			"\t\t\tvar viewsManager = _serviceProvider.GetRequiredService<IViewService>();",
			"\t\t\tvar dataContext = _serviceProvider.GetRequiredService<AuthViewModel>();",
			"",
			"\t\t\tviewsManager.Open<AuthView>(dataContext);",
			"\t\t}"
		]
	},
	"RelayCommand": {
		"prefix": "rc",
		"body": [
			"private Action<object> execute;",
			"\t\tprivate Func<object, bool> canExecute;",
			"",
			"\t\tpublic event EventHandler? CanExecuteChanged",
			"\t\t{",
			"\t\t\tadd { CommandManager.RequerySuggested += value; }",
			"\t\t\tremove { CommandManager.RequerySuggested -= value; }",
			"\t\t}",
			"",
			"\t\tpublic RelayCommand(Action<object> execute, Func<object, bool> canExecute = null!)",
			"\t\t{",
			"\t\t\tthis.execute = execute;",
			"\t\t\tthis.canExecute = canExecute;",
			"\t\t}",
			"",
			"\t\tpublic bool CanExecute(object parameter) => this.canExecute == null || this.canExecute(parameter);",
			"",
			"\t\tpublic void Execute(object parameter) => this.execute(parameter);"
		]
	},
	"BaseViewModel": {
		"prefix": "bvm",
		"body": [
			"public event PropertyChangedEventHandler? PropertyChanged;",
			"\t\tprotected virtual void OnPropertyChanged([CallerMemberName] string propertyName = \"\")",
			"\t\t{",
			"\t\t\tPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));",
			"\t\t}"
		]
	},
	"AuthViewModel": {
		"prefix": "avm",
		"body": [
			"private readonly IServiceProvider _serviceProvider;",
			"\t\tprivate readonly IAuthService _authService;",
			"\t\tprivate readonly IViewService _viewService;",
			"",
			"\t\tprivate string _login = string.Empty!;",
			"\t\tpublic string Login",
			"\t\t{",
			"\t\t\tget => _login;",
			"\t\t\tset",
			"\t\t\t{",
			"\t\t\t\t_login = value;",
			"\t\t\t\tOnPropertyChanged();",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\tprivate string _password = string.Empty!;",
			"\t\tpublic string Password",
			"\t\t{",
			"\t\t\tget => _password;",
			"\t\t\tset",
			"\t\t\t{",
			"\t\t\t\t_password = value;",
			"\t\t\t\tOnPropertyChanged();",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\tpublic ICommand LogIn",
			"\t\t{",
			"\t\t\tget => new RelayCommand(",
			"\t\t\t\texecute: (o) =>",
			"\t\t\t\t{",
			"\t\t\t\t\ttry",
			"\t\t\t\t\t{",
			"\t\t\t\t\t\t_authService.Auth(Login, Password);",
			"",
			"\t\t\t\t\t\t/* redirect */",
			"\t\t\t\t\t}",
			"\t\t\t\t\tcatch (Exception e)",
			"\t\t\t\t\t{",
			"\t\t\t\t\t\tMessageBox.Show(e.Message);",
			"\t\t\t\t\t}",
			"\t\t\t\t},",
			"\t\t\t\tcanExecute: (o) => !string.IsNullOrEmpty(Login) && !string.IsNullOrEmpty(Password)",
			"\t\t\t);",
			"\t\t}",
			"",
			"\t\tpublic AuthViewModel(IServiceProvider serviceProvider, IAuthService authorizationService, IViewService viewsManager)",
			"\t\t{",
			"\t\t\t_serviceProvider = serviceProvider;",
			"\t\t\t_authService = authorizationService;",
			"\t\t\t_viewService = viewsManager;",
			"\t\t}"
		]
	},
	"ViewService": {
		"prefix": "vs",
		"body": [
			"private IServiceProvider _serviceProvider;",
			"",
			"\t\tpublic ViewService(IServiceProvider serviceProvider)",
			"\t\t{",
			"\t\t\t_serviceProvider = serviceProvider;",
			"\t\t}",
			"",
			"\t\tprivate Window _window;",
			"\t\tpublic Window Current { get => _window; }",
			"",
			"\t\tpublic void Open<TView>(object? dataContext = null) where TView : Window",
			"\t\t{",
			"\t\t\tvar window = _serviceProvider.GetRequiredService<TView>();",
			"",
			"\t\t\t_window = Current;",
			"\t\t\tCurrent?.Close();",
			"\t\t\t_window = window;",
			"",
			"\t\t\tif (dataContext is not null)",
			"\t\t\t\t_window.DataContext = dataContext;",
			"",
			"\t\t\t_window.Show();",
			"\t\t}"
		]
	},
    "Scaffold":{
        "prefix": "scfld",
        "body":[
            "Scaffold-DbContext \"Server=(localdb)\\mssqllocaldb;Database=DemoExam;TrustServerCertificate=True;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models"
        ]
    }
}